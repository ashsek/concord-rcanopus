// Code generated by protoc-gen-go.
// source: membership.proto
// DO NOT EDIT!

/*
Package membership is a generated protocol buffer package.

It is generated from these files:
	membership.proto

It has these top-level messages:
	RequestMembership
	ReplyMembership
*/
package membership

import proto "github.com/golang/protobuf/proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal

// The request message containing the user's name.
type RequestMembership struct {
	Name     string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	ReadOnly int32  `protobuf:"varint,2,opt,name=read_only" json:"read_only,omitempty"`
}

func (m *RequestMembership) Reset()         { *m = RequestMembership{} }
func (m *RequestMembership) String() string { return proto.CompactTextString(m) }
func (*RequestMembership) ProtoMessage()    {}

// The response message containing the greetings
type ReplyMembership struct {
	Message string `protobuf:"bytes,1,opt,name=message" json:"message,omitempty"`
}

func (m *ReplyMembership) Reset()         { *m = ReplyMembership{} }
func (m *ReplyMembership) String() string { return proto.CompactTextString(m) }
func (*ReplyMembership) ProtoMessage()    {}

func init() {
}

// Client API for MemRequest service

type MemRequestClient interface {
	SayHello(ctx context.Context, in *RequestMembership, opts ...grpc.CallOption) (*ReplyMembership, error)
}

type memRequestClient struct {
	cc *grpc.ClientConn
}

func NewMemRequestClient(cc *grpc.ClientConn) MemRequestClient {
	return &memRequestClient{cc}
}

func (c *memRequestClient) SayHello(ctx context.Context, in *RequestMembership, opts ...grpc.CallOption) (*ReplyMembership, error) {
	out := new(ReplyMembership)
	err := grpc.Invoke(ctx, "/membership.MemRequest/SayHello", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MemRequest service

type MemRequestServer interface {
	SayHello(context.Context, *RequestMembership) (*ReplyMembership, error)
}

func RegisterMemRequestServer(s *grpc.Server, srv MemRequestServer) {
	s.RegisterService(&_MemRequest_serviceDesc, srv)
}

func _MemRequest_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestMembership)
	if err := dec(in); err != nil {
		return nil, err
	}
	out, err := srv.(MemRequestServer).SayHello(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _MemRequest_serviceDesc = grpc.ServiceDesc{
	ServiceName: "membership.MemRequest",
	HandlerType: (*MemRequestServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _MemRequest_SayHello_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
